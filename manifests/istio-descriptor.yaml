apiVersion: v1
binaryData:
  descriptor.bin: 
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: envoy-descriptor
  namespace: istio-system
